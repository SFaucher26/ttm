name: Release-pipline CI/CD

on:
  push:
    branches:
      - main
      - develop

permissions:
  contents: write
  packages: write

jobs:
  get-version:
    name: Get Version
    uses: lenra-io/github-actions/.github/workflows/get-version.yml@main
    with:
      changelog-include-hidden-sections: true
      release-branch: 'main'
      prerelease-branches: 'develop'
      
  build:
    name: Build
    runs-on: ubuntu-latest
    if: ${{ needs.get-version.outputs.version != '' }}
    needs:
      - get-version

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

        # Setup Node.js for front build
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install frontend dependencies
        run: cd src/main/webapp && npm install

      - name: Build frontend
        run: cd src/main/webapp && npm run build

        # Setup Java for backend build
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Build backend
        run: ./gradlew bootjar

      - name: Upload Spring Boot artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-ttm
          path: build/libs/*.jar

      # Docker Login
      - name: Login to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # Build & Push frontend image
      - name: Build frontend image
        run: |
          docker build -t ghcr.io/sfaucher26/ttm/front:latest -f front.Dockerfile .
          docker push ghcr.io/sfaucher26/ttm/front:latest

      # Build & Push backend image
      - name: Build backend image
        run: |
          docker build -t ghcr.io/sfaucher26/ttm/back:latest -f back.Dockerfile .
          docker push ghcr.io/sfaucher26/ttm/back:latest

  release:
    if: ${{ needs.get-version.outputs.version != '' }}
    needs: [ get-version, build ]
    runs-on: ubuntu-latest
    steps:
    
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-ttm
          path: artifacts/
          
      - name: Create Release
        env:
          VERSION: "${{ needs.get-version.outputs.version }}"
          REPO: "${{ github.repository }}"
          COMMIT: "${{ github.sha }}"
          CHANGELOGS: "${{ needs.get-version.outputs.changelog }}"
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "${CHANGELOGS}" > changelogs.md
          gh release create --repo $REPO --target $COMMIT -F changelogs.md v$VERSION artifacts/*.jar
      
  publish:
    if: ${{ needs.get-version.outputs.version != '' && needs.get-version.outputs.channel == '' }}
    needs: [ get-version, build ]
    runs-on: ubuntu-latest

    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          port: 22
          script: |
            docker compose pull
            docker compose up -d

 
