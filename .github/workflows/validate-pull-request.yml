name: Validate-pull-request

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
    branches:
      - develop
jobs:
  check:
    name: Validation du code
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ttm
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Wait for PostgreSQL to be ready
        run: |
          TIMEOUT=60  # Timeout en secondes
          INTERVAL=2  # Intervalle de vérification en secondes
          COUNT=0
          while ! pg_isready -h localhost -p 5432 -U postgres; do
            if [ $COUNT -ge $TIMEOUT ]; then
              echo "Timeout reached. PostgreSQL is not ready."
              exit 1
            fi
            echo "Waiting for PostgreSQL..."
            sleep $INTERVAL
            COUNT=$((COUNT + INTERVAL))
          done
          echo "PostgreSQL is ready"
      - name: Run spring checks
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/ttm
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgres
        run: gradle check -Dspring.profiles.active=ci

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
           name: test-report
           path: ./build/test-results/test/
           if-no-files-found: error
           retention-days: 1
           compression-level: 0




  lighthouseci:
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ttm
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      # Cloner le repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # Installer JDK 17
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Attendre que PostgreSQL soit prêt
      - name: Wait for PostgreSQL to be ready
        run: |
          TIMEOUT=60
          INTERVAL=2
          COUNT=0
          while ! pg_isready -h localhost -p 5432 -U postgres; do
            if [ $COUNT -ge $TIMEOUT ]; then
              echo "Timeout reached. PostgreSQL is not ready."
              exit 1
            fi
            echo "Waiting for PostgreSQL..."
            sleep $INTERVAL
            COUNT=$((COUNT + INTERVAL))
          done
          echo "PostgreSQL is ready"

      # Installer Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Build du backend avec Gradle
      - name: Build Backend
        run: ./gradlew build

      # Démarrer le backend en mode production
      - name: Start Backend
        run: java -jar build/libs/*.jar &

      # Attendre que le backend soit prêt
      - name: Wait for Backend
        run: |
          echo "Waiting for backend..."
          for i in {1..30}; do
            if curl -s http://localhost:8080/actuator/health | grep -q '"status":"UP"'; then
              echo "Backend is ready!"
              break
            fi
            sleep 5
          done

      # Installer Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # Configurer npm
      - name: Configure npm to use public registry
        run: npm config set registry https://registry.npmjs.org/

      # Installer les dépendances du frontend
      - name: Install Frontend Dependencies
        run: |
          cd src/main/webapp
          npm install

      # Build du frontend avec Vite
      - name: Build Frontend
        run: |
          cd src/main/webapp
          npm run build

      # Servir le frontend en mode statique
      - name: Serve Frontend
        run: |
          cd src/main/webapp
          npm install -g serve
          serve -s dist &

      # Attendre que le frontend soit prêt
      - name: Wait for Frontend
        run: |
          echo "Waiting for frontend..."
          for i in {1..30}; do
            if curl -s http://localhost:3000 | grep -q "<title>"; then
              echo "Frontend is ready!"
              break
            fi
            sleep 5
          done

      # Installer Lighthouse CI
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.14.x

      # Exécuter Lighthouse CI
      - name: Run Lighthouse CI
        run: lhci autorun --collect.url=http://localhost:5173







