services:
  web:
   # image: registry.nocturlab.fr/sfaucher/sfttmfront:latest
    image: ghcr.io/sfaucher26/ttm/front:latest
    labels:
      - traefik.enable=true
      - traefik.http.routers.sfttm-web.rule=Host(`sfaucherttm.nocturlab.fr`)
      - traefik.http.services.sfttm-web.loadbalancer.server.port=80
    networks:
      - traefik
    depends_on:
      - api

  api:
    image: ghcr.io/sfaucher26/ttm/back:latest
    labels:
      - traefik.enable=true
      - traefik.http.routers.sfttm-api.rule=Host(`sfaucherttm.nocturlab.fr`) && PathPrefix(`/api`)
      - traefik.http.services.sfttm-api.loadbalancer.server.port=8080
    networks:
      - traefik
      - api
      - db
    environment:
      SERVER_HOST: https://sfaucherttm.nocturlab.fr
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/app
      SPRING_DATASOURCE_USERNAME: app
      SPRING_DATASOURCE_PASSWORD: app
      SPRING_MONGO_URL: mongodb://mongo:27017/app?replicaSet=rs0
    depends_on:
      db:
        condition: service_healthy
      mongo:
        condition: service_healthy
    restart: always


  db:
    image: postgres:latest
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      POSTGRES_DB: app
    volumes:
      - pg_data:/var/lib/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 3s
    networks:
      - db

  mongo:
    image: ghcr.io/sfaucher26/ttm/mongo/initmongo:latest
    command: --replSet rs0
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - db
    volumes:
      - mongo_data:/data/db

volumes:
  mongo-data:
  pg_data:

networks:
  api:
  db:
  traefik:
    external: true
    name: traefik_default


